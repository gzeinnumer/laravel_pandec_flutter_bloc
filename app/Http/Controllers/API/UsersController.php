<?php

/**
 * Generated By GZeinNumerCodeGenerator
 * www.github.com/gzeinnumer
 * at 2023-02-28 17:03:56
 * zip name 20230228170356_users_6D1WCL9Ywn.zip
 */

namespace App\Http\Controllers\API;

use App\Http\Resources\UsersResource;
use App\Models\API\UsersModel;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class UsersController extends BaseController
{
    /*
    {
        "name" : "",
        "email" : "",
        "email_verified_at" : "",
        "password" : "",
        "remember_token" : ""
    }
    */
    //localhost:8000/api/users/insert
    public function insert(Request $r)
    {
        try {
            //to validate duplicate data
            //change activeValidateDuplicateData to true, if you want to validate 
            //if mobile sent duplicate data
            //add "created_at" : "2022-08-04 16:08:09" to json
            /*
            {
                "object1" : "data 1",
                "object2" : "data 2",
                "created_at" : "2022-08-04 16:08:09" // current time
            }
            */

            $activeValidateDuplicateData = false;
            if ($activeValidateDuplicateData) {
                $data = UsersModel::where([
                    "id" => $r->id,
                    "name" => $r->name, "email" => $r->email,
                    "email_verified_at" => $r->email_verified_at,
                    "password" => $r->password,
                    "remember_token" => $r->remember_token,
                    "created_at" => $r->created_at,
                    "updated_at" => $r->updated_at,
                ])->first();
                if ($data != null) {
                    $apiResponse = $this->getApiResponse(1);
                    return $this->responseSuccess($apiResponse);
                }
            }

            $input = array(
                'name' => 'required|string|min:1',
                'email' => 'required|string|min:1',
                // 'email_verified_at' => 'required|string|min:1',
                'password' => 'required|string|min:1',
                // 'remember_token' => 'required|string|min:1',
            );

            $validator = Validator::make($r->all(), $input);

            if ($validator->fails()) {
                $apiResponse = $this->getApiResponse(0);
                $apiResponse->message = $validator->getMessageBag();
                return $this->responseFailed($apiResponse);
            }

            DB::beginTransaction();

            $data = new UsersModel();
            $data->name = $r->name;
            $data->email = $r->email;
            $data->email_verified_at = $r->email_verified_at;
            $data->password = $r->password;
            $data->remember_token = $r->remember_token;
            $data->save();

            DB::commit();

            $apiResponse = $this->getApiResponse(1);
            return $this->responseSuccess($apiResponse);
        } catch (\Throwable $th) {
            DB::rollBack();
            return $this->responseError($th);
        }
    }

    //localhost:8000/api/users/all
    public function all()
    {
        try {
            $data = UsersModel::all();

            return $this->toList(UsersResource::collection($data), 1, 0);
        } catch (\Throwable $th) {
            return $this->responseError($th);
        }
    }

    //http://localhost:8000/api/users/paging?limit=10&page=1&start_date=2023-01-01&end_date=2023-01-01
    public function paging(Request $r)
    {
        try {
            $limit = $r->limit ? $r->limit : 10;
            $page = $r->page ? $r->page : 1;
            $start_date = $r->start_date;
            $end_date = $r->end_date;

            $query = DB::table('users');

            if ($start_date) {
                $query = $query->wherebetween("users.created_at", array($start_date . " 00:00:00", $end_date . " 23:59:59"));
            }

            $dataParsing = $query;

            return $this->toPaging(
                1,
                $dataParsing,
                $limit,
                $page
            );
        } catch (\Throwable $th) {
            return $this->responseError($th);
        }
    }

    /*
    {
        "name" : "",
        "email" : "",
        "email_verified_at" : "",
        "password" : "",
        "remember_token" : ""
    }
    */
    //localhost:8000/api/users/update/1
    public function update(Request $r, $id)
    {
        try {
            $input = array(
                'name' => 'required|string|min:1',
                'email' => 'required|string|min:1',
                // 'email_verified_at' => 'required|string|min:1',
                // 'password' => 'required|string|min:1',
                // 'remember_token' => 'required|string|min:1',
            );

            $validator = Validator::make($r->all(), $input);

            if ($validator->fails()) {
                $apiResponse = $this->getApiResponse(0);
                $apiResponse->message = $validator->getMessageBag();
                return $this->responseFailed($apiResponse);
            }

            DB::beginTransaction();

            $data = UsersModel::find($id);
            $data->name = $r->name;
            $data->email = $r->email;
            $data->email_verified_at = $r->email_verified_at;
            $data->password = $r->password;
            $data->remember_token = $r->remember_token;
            $data->save();

            DB::commit();

            $apiResponse = $this->getApiResponse(1);
            return $this->responseSuccess($apiResponse);
        } catch (\Throwable $th) {
            DB::rollBack();
            return $this->responseError($th);
        }
    }

    //localhost:8000/api/users/delete/1
    public function delete($id)
    {
        try {
            $data = UsersModel::find($id);

            DB::beginTransaction();

            $data->delete();

            DB::commit();

            $apiResponse = $this->getApiResponse(1);
            return $this->responseSuccess($apiResponse);
        } catch (\Throwable $th) {
            return $this->responseError($th);
        }
    }

    //localhost:8000/api/users/find/1
    public function find($id)
    {
        try {
            $data = UsersModel::find($id);

            return $this->toObject(new UsersResource($data), 1, 0);
        } catch (\Throwable $th) {
            return $this->responseError($th);
        }
    }
}
